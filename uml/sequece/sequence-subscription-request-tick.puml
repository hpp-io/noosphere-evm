@startuml sequence-wallet-between-fixed

actor User
participant SubscriptionConsumer
participant Wallet
participant Router <<IRouter, ISubscriptionsManager>>
participant Coordinator
participant Billing
participant Node as InfernetNode

' == Subscription 생성 ==
User -> SubscriptionConsumer: _createComputeSubscription(...)
SubscriptionConsumer -> Router: createSubscription(...)\n[ISubscriptionsManager]
Router --> SubscriptionConsumer: subId

' == 최초 요청 (sendRequest: 선락 + 커밋 생성) ==
SubscriptionConsumer -> Router: sendRequest(containerId, interval,\n redundancy, lazy, paymentToken, paymentAmount,\n wallet, verifier)\n[IRouter]
activate Router
Router -> Router: _markRequestInFlight(wallet, subId,\n redundancy, paymentToken, paymentAmount)\n[internal]
Router -> Wallet: cLock(commitmentSeed, token, amount)
Wallet --> Router: LockedOk

Router -> Coordinator: startRequest(containerId, interval, redundancy,\n lazy, paymentToken, paymentAmount, wallet, verifier)\n[IRouter→ICoordinator]
Coordinator --> Router: Commitment{requestId, commitmentId, subId, interval, timeoutTs, ...}
deactivate Router

Router --> SubscriptionConsumer: Commitment(...)
    note over Coordinator
        interval이 만료됨.
        응답이 없어서 다음 Commitment 생성하지 못함
    end note

Node -> Coordinator: prepareNextInterval(subId, nextInterval)
Coordinator -> Billing:  _calculateNextTickFee(subscriptionId: uint32,\n\t\t\t deliveryInterval: uint32, nodeWallet: address)
Coordinator -> Router: prepareNextInterval(subId, nextInterval)\n[IRouter]
activate Router
Router -> Router: _markRequestInFlight(wallet, subId,\n paymentToken, nextAmount)\n[internal]
Router -> Wallet: cLock(nextCommitmentSeed, token, nextAmount)
Wallet --> Router: LockedOk
Router -> Wallet: cTransfer(spender=Router, token,\n to=tickNodeWallet, tickFeeAmount)
Wallet --> Router: TransferOk

Router -> Coordinator: startRequest(containerId, nextInterval,\n redundancy, lazy, paymentToken, nextAmount,\n wallet, verifier)\n[IRouter→ICoordinator]
Coordinator --> Router: Commitment{requestId, commitmentId, subId, nextInterval, ...}
deactivate Router

@enduml
